/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import client.Batiment;
import client.Etage;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.StringTokenizer;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.SwingConstants;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author Noémie
 */
public class IReel extends javax.swing.JFrame {

    /**
     * Creates new form IReel
     */
    List<Batiment> listeBatiment = new ArrayList<Batiment>();
    
    
    public IReel() {
        initComponents();
        lectureFichier();
        constructionTree();
        System.out.println(listeBatiment);
        for (int i=0; i<listeBatiment.size(); i++) {
            System.out.print(listeBatiment.get(i).getNom());
            System.out.println(listeBatiment.get(i).getListeEtage());
            for (int j=0; j<listeBatiment.get(i).getListeEtage().size(); j++) {
                System.out.print(listeBatiment.get(i).getListeEtage().get(j).getNom());
                System.out.println(listeBatiment.get(i).getListeEtage().get(j).getListeSalle());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMain = new javax.swing.JPanel();
        jLabelAffichage = new javax.swing.JLabel();
        jButtonRetour = new javax.swing.JButton();
        jLabelSelection = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelAffichage.setText("Affichages des données des capteurs");

        jButtonRetour.setText("Retour");
        jButtonRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetourActionPerformed(evt);
            }
        });

        jLabelSelection.setText("Selection du/des capteurs :");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Capteurs");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAffichage, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSelection)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jButtonRetour)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelAffichage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                .addComponent(jButtonRetour)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButtonRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetourActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonRetourActionPerformed
 
    
    private void constructionTree() {
       
       String fichier = "petiteListeCapteurs.txt",ligne;
       
       DefaultMutableTreeNode selectedNode;
       selectedNode = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
	try{
            InputStream ips=new FileInputStream(fichier); 
            InputStreamReader ipsr=new InputStreamReader(ips);
            BufferedReader br=new BufferedReader(ipsr);
            while ((ligne=br.readLine())!=null){
                DefaultMutableTreeNode ajouter = new DefaultMutableTreeNode(ligne);
                selectedNode.add(ajouter);
            }
            br.close(); 
	}		
	catch (Exception e){
            System.out.println(e.toString());
	}
    }
    
     
    public void ajouterEtage(String nomE, List<Etage> listeE, String nomS) {
        ListIterator<Etage> iter = listeE.listIterator();
        Etage etage = new Etage(nomE);
        Etage e_courant = new Etage();
        while (iter.hasNext()){
            e_courant = iter.next();
            if (e_courant.getNom().equals(nomE)) {
                ajouterSalle(nomS,e_courant.getListeSalle());
                return;
            }
	}
        iter.add(etage);
        e_courant = iter.previous();
        ajouterSalle(nomS,e_courant.getListeSalle());
    }
    
    public void ajouterSalle(String nomS, List<String> listeS) {
        ListIterator<String> iter = listeS.listIterator();
        while (iter.hasNext()){
             if (iter.next().equals(nomS)) return;
	}
        iter.add(nomS);
    }
    
    public void ajouterListes(String nomB, String nomE, String nomS) {
        ListIterator<Batiment> iterBat = listeBatiment.listIterator();
        Batiment bat = new Batiment(nomB);
        Etage etage = new Etage(nomE);
        Batiment b_courant = new Batiment();
        while (iterBat.hasNext()){
            b_courant = iterBat.next();
            if (b_courant.getNom().equals(nomB)) {
                ajouterEtage(nomE,b_courant.getListeEtage(),nomS);
                return;
            }
	}
	iterBat.add(bat);
        b_courant = iterBat.previous();
        ajouterEtage(nomE,b_courant.getListeEtage(),nomS);
    }
    
    
    private void lectureFichier() {
        
        String fichier = "petiteListeCapteurs.txt",
               ligne,loc,batiment,etage,salle;
		
	//lecture du fichier texte	
	try{
            InputStream ips=new FileInputStream(fichier); 
            InputStreamReader ipsr=new InputStreamReader(ips);
            BufferedReader br=new BufferedReader(ipsr);
            while ((ligne=br.readLine())!=null){
                System.out.println(ligne);
                StringTokenizer Tok = new StringTokenizer(ligne,"-");
                while (Tok.hasMoreElements())  {
                    loc = (String) Tok.nextElement();
                    if (loc.equals("interieur")) {
                        batiment = (String) Tok.nextElement();
                        etage = (String) Tok.nextElement();
                        salle = (String) Tok.nextElement();
                        ajouterListes(batiment,etage,salle);
                    }
                }
            }
            br.close(); 
	}		
	catch (Exception e){
            System.out.println(e.toString());
	}
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRetour;
    private javax.swing.JLabel jLabelAffichage;
    private javax.swing.JLabel jLabelSelection;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
